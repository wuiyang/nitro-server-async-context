import type { NitroServerAsyncContext } from "#custom-server-async-context";

import { fileURLToPath } from "mlly";
import { defineNuxtNitroModule } from "nuxt-nitro-module-kit";
import { addTypeTemplate } from "nuxt-nitro-module-kit/utils";
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
export interface NitroServerAsyncContextConfig {}

declare module "nitropack" {
  interface NitroRuntimeHooks {
    /** use this to provide async context for both request and outside of server */
    "async-context:create": (contextObject: NitroServerAsyncContext) => Promise<void> | void;
  }
}

declare module "h3" {
  // can extend interface with another interface via this method
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  interface H3EventContext extends NitroServerAsyncContext {
  }
}

const MODULE_NAME = "nitro-server-async-context";
export default defineNuxtNitroModule<NitroServerAsyncContextConfig>({
  meta: {
    name: MODULE_NAME,
    compatibility: {
      nuxt: ">=3.0.0",
    },
  },
  setup(_options, { nitro }) {
    const resolve = (path: string) => fileURLToPath(new URL(path, import.meta.url));

    nitro.options.externals ||= {} as never;
    nitro.options.externals.inline ||= [];
    nitro.options.externals.inline.push(resolve("runtime/"));

    // add plugins
    nitro.options.plugins ||= [];
    nitro.options.plugins.push(resolve("runtime/plugins/0.async-context-injection"));

    // add utils if auto imports supported
    if (nitro.options.imports) {
      nitro.options.imports.dirs ||= [];
      nitro.options.imports.dirs.push(resolve("runtime/utils/*"));
    }

    // provide global hint
    addTypeTemplate({
      filename: `types/${MODULE_NAME}.d.ts`,
      getContents: () => [
        `// generated by ${MODULE_NAME}`,
        `declare module "#${MODULE_NAME}" {`,
        "  export interface NitroServerAsyncContext {}",
        "}",
        "",
      ].join("\n"),
    });
  },
});
